uniform bool Light_Enabled,Fog_Enabled,Tex_Enabled;	
uniform sampler2D tex;


varying vec3 normal, lightDir, eyeVec;
varying float att;

void main (void)
{
	vec4 final_color;


	if( Light_Enabled )
	{
		final_color += (gl_FrontLightModelProduct.sceneColor * gl_FrontMaterial.ambient) + 
		(gl_LightSource[0].ambient * gl_FrontMaterial.ambient)*att * 0.001;
							
		vec3 N = normalize(normal);
		vec3 L = normalize(lightDir);
	
		float lambertTerm = dot(N,L);
	
		if(lambertTerm > 0.0)
		{
			final_color += gl_LightSource[0].diffuse * 
			gl_FrontMaterial.diffuse * 
			lambertTerm * att * 0;	
		
			vec3 E = normalize(eyeVec);
			vec3 R = reflect(-L, N);
		
			float specular = pow( max(dot(R, E), 0.0), 
			gl_FrontMaterial.shininess );
		
			final_color += gl_LightSource[0].specular * 
			gl_FrontMaterial.specular * specular * att;	
		}
	}		   
			
	final_color += gl_Color;
					  
	if(Tex_Enabled)
	{
		final_color *= texture2D( tex,gl_TexCoord[0].st );
		vec4 get_tex_alpha = texture2D( tex,gl_TexCoord[0].st );
		final_color.a = get_tex_alpha.a;
	}



	//final_color.a = 1;

	gl_FragColor = final_color;			
}